package Model.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "vulnerabilities")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Vulnerability {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String title;
    
    @Column(columnDefinition = "TEXT", nullable = false)
    private String description;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Severity severity;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private VulnerabilityType type;
    
    @Column(name = "line_number")
    private Integer lineNumber;
    
    @Column(name = "column_number")
    private Integer columnNumber;
    
    @Column(name = "vulnerable_code", columnDefinition = "TEXT")
    private String vulnerableCode;
    
    @Column(name = "fixed_code", columnDefinition = "TEXT")
    private String fixedCode;
    
    @Column(name = "cwe_id")
    private String cweId;
    
    @Column(name = "cvss_score")
    private Double cvssScore;
    
    @Column(columnDefinition = "TEXT")
    private String recommendation;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "code_analysis_id", nullable = false)
    private CodeAnalysis codeAnalysis;
    
    public enum Severity {
        LOW,
        MEDIUM,
        HIGH,
        CRITICAL
    }
    
    public enum VulnerabilityType {
        SQL_INJECTION,
        XSS,
        CSRF,
        BUFFER_OVERFLOW,
        INSECURE_DESERIALIZATION,
        BROKEN_AUTHENTICATION,
        SENSITIVE_DATA_EXPOSURE,
        MISSING_FUNCTION_LEVEL_ACCESS_CONTROL,
        USING_COMPONENTS_WITH_KNOWN_VULNERABILITIES,
        INSUFFICIENT_LOGGING_AND_MONITORING,
        INSECURE_DIRECT_OBJECT_REFERENCES,
        SECURITY_MISCONFIGURATION,
        OTHER
    }
} 